# -*- coding: utf-8 -*-
"""week13 A106260073張雅雯

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1m52hgxaWBvz-fVyXg87bLFg186KNuGfC
"""

import pandas as pd

covid19_ts = pd.read_csv("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv")
covid19_ts_tw = covid19_ts[covid19_ts['Country/Region'] == 'Taiwan*']
cumulative_confirmed_tw = list(covid19_ts_tw.loc[:,'1/22/20':'5/27/20'].values.ravel())
dates = list(covid19_ts_tw.loc[:, '1/22/20':'5/27/20'].columns)
print(dates)
print(len(dates))
print(cumulative_confirmed_tw)
print(len(cumulative_confirmed_tw))
# 在這 127 天中，哪些"日期"是零新增確診?

cumulative_confirmed_tw_lag = [cumulative_confirmed_tw[i] for i in range(len(cumulative_confirmed_tw)-1)]
cumulative_confirmed_tw_lag.insert(0, 0)
print(cumulative_confirmed_tw_lag)
print(len(cumulative_confirmed_tw_lag))

daily_increase_tw = []
for i, j in zip(cumulative_confirmed_tw, cumulative_confirmed_tw_lag):
    daily_increase = i - j
    daily_increase_tw.append(daily_increase)
print(daily_increase_tw)
print(len(daily_increase_tw))

daily_increase_tw = [i - j for i, j in zip(cumulative_confirmed_tw, cumulative_confirmed_tw_lag)]
print(daily_increase_tw)
print(len(daily_increase_tw))

print(dates)
print(daily_increase_tw)

plus_zero_dates=[]
for d ,di in zip(dates,daily_increase_tw):
  if di==0:
    plus_zero_dates.append(d)
  print(plus_zero_dates)
  print(len(plus_zero_dates))

plus_zero_dates=[d  for d ,di in zip(dates,daily_increase_tw) if di==0]
print(plus_zero_dates)
print(len(plus_zero_dates))

from random import sample #隨機

random_integer=sample(range(1,1001),1)[0] #1到1000
print(random_integer)
print(random_integer%56)#餘數

from random import sample #隨機

n_samples=0 
while True:#無限重複 start
  random_integer=sample(range(1,1001),1)[0] #1到1000#step
  n_samples+=1 #跑隨機次數(抽第幾次)
  if random_integer%56==0:
      break 
print(random_integer)
print(n_samples)

samples_history=[] #把跑出來的都有紀錄
while True:#無限重複 start
  random_integer=sample(range(1,1001),1)[0] #1到1000#step
  samples_history.append(random_integer) #跑隨機次數(抽第幾次)
  if random_integer%56==0:
      break 
print(samples_history)
print(len(samples_history))

n_vowels=0
for i in 'azcbobobegghakl':#迭帶
  if i in ['a','e','i','o','u']:
    print(i)
    n_vowels+=1
print(n_vowels)

test_str='azcbobobegghak'
n_char=len(test_str)  
#print(n_char)
for i in range(12):
  print(test_str[i:i+3])

test_str='azcbobobegghak'
n_char=len(test_str)
n_bobs=0  
for i in range(n_char-2):
  if test_str[i:i+3]=='bob':
    n_bobs+=1
print(n_bobs)

#算樣本標準差
x=list(range(1,101))
N=len(x) #個數
x_bar=sum(x)/N
sse=0
for xi in x:
  error= xi-x_bar
  squared_error=error**2
  sse=sse+squared_error #sse+=squared_error
sample_mse=sse/(N-1)
sample_stdv=sample_mse**(0.5)
print(sample_stdv)

from statistics  import stdev
stdev(range(1,101))#[0,1,....,100]

程式封裝的三個層級
模組與套件（Modules and classes）
類別（Classes）
函數（Functions）

print('Luke')
print('use the force!')
help(print)

#定義
def absolute(x):
  """"
  Returns the absolute value of x.
  """
  if x<0:
    return-x
  else:
    return x

help(absolute)

absolute(-5566)

absolute(0)

#差別在是否可存取
def absolute(x):
  """"
  Returns the absolute value of x.
  """
  if x<0:
    print(-x)
  else:
    print(x)

absolute(-5566)

positive_56=absolute(-5566)
print(positive_56)

def absolute(x):
  """"
  Returns the absolute value of x.
  """
  if x<0:
    abs_x=-x
    print("{}的絕對值是{}".format(x,abs_x))
    return abs_x
  else:
    print("{}的絕對值是{}".format(x,x))
    return x

positive_56=absolute(-5566)
print(positive_56)

def get_fahrenheit(x):
    """
    Transform a Celsius degree into  Farenheit scale
    """
    fah = x * 9/5 + 32
    return fah

def get_bmi(height, weight):
    """
    Calculate BMI based on height and weight
    """
    height = height / 100
    bmi = weight / height**2
    return bmi

get_bmi(198, 129)

get_bmi(216, 147)

def is_prime(x):
    """
    Returns True if x is a prime, or returns False
    """
    divisors = []
    for i in range(1, x+1):
        if x % i == 0:
            divisors.append(i)
    n_divisors = len(divisors)
    return n_divisors == 2

is_prime(1)

is_prime(2)

is_prime(8)

